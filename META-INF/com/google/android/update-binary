#!/sbin/sh
# Intelliboost update script
# Written in bash

#TODO: draw out framework, and plot update bin from there
#Reminder: All init.d scripts that came from previous mods must be deleted, if not there might be conflicts

# TODO: Provide support for x86 if demand is high

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=$(dirname "$ZIPFILE");
sys=$(find /dev/block/platform -name system)
dat=$(find /dev/block/platform -name data)
udat=$(find /dev/block/platform -name userdata)
cac=$(find /dev/block/platform -name cache)

# ui_print "<message>" ["<message 2>" ...]
ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1" >> $OUTFD;
    shift;
  done;
}
# show_progress <amount> <time>
show_progress() { echo "progress $1 $2" >> $OUTFD; }
# set_progress <amount>
set_progress() { echo "set_progress $1" >> $OUTFD; }

# sleep <seconds> exists in shell

# is_substring <substring> <string>
is_substring() {
  case "$2" in
    *$1*) echo 1;;
    *) echo 0;;
  esac;
}
# less_than_int <x> <y>
less_than_int() { test $1  -lt $2 && echo 1 || echo 0; }
# greater_than_int <x> <y>
greater_than_int() { test $1 -gt $2 && echo 1 || echo 0; }

# format(fs_type, partition_type, device, fs_size, mountpoint) {} is unneeded since specific format/wipe commands may be run directly
# mount <partition> exists in shell
# unmount <partition>
unmount() { umount $1; }
# is_mounted <partition>
is_mounted() {
  case `mount` in
    *" $1 "*) echo 1;;
    *) echo 0;;
  esac;
}
# tune2fs(device[, arg, â¦]) {} should be done directly with the tune2fs command

# write_raw_image <file> <block>
write_raw_image() { dd if=$1 of=$2; }
# write_firmware_image() {} is a manufacturer command to apply further OEM update zips with hboot/uboot functions, so can't be duplicated
# wipe_block_device(block_dev, len) {} should be done directly with dd or nanderase
# wipe_cache() {} should be done directly with format or rm -rf

# package_extract_file <file> <destination_file>
package_extract_file() { unzip -o "$ZIPFILE" "$1" -p > "$2"; }
# package_extract_dir <dir> <destination_dir>
package_extract_dir() { unzip -o "$ZIPFILE" "$1/*" -d "$2"; }

# rename <file> <destination_file>
rename() { mv -f $1 $2; }

# delete <file> [<file2> ...]
delete() { rm -f $*; }
# delete_recursive <dir> [<dir2> ...]
delete_recursive() { rm -rf $*; }

# symlink <file/dir> <link> [<link2> ...]
symlink() { ln -s $*; }

# set_metadata <file> <uid|gid|mode|capabilities|selabel> <value> [<uid|gid|mode|capabilities|selabel_2> <value2> ...]
set_metadata() {
  file="$1";
  shift;
  until [ ! "$2" ]; do
    case $1 in
      uid) chown $2 $file;;
      gid) chown :$2 $file;;
      mode) chmod $2 $file;;
      capabilities) ;;
      selabel)
        for i in /system/bin/toybox /system/toolbox /system/bin/toolbox; do
          LD_LIBRARY_PATH=/system/lib $i chcon -h $2 $file;
          LD_LIBRARY_PATH=/system/lib $i chcon $2 $file;
        done;
        chcon -h $2 $file;
        chcon $2 $file;
      ;;
      *) ;;
    esac;
    shift 2;
  done;
}
# set_metadata_recursive <dir> <uid|gid|dmode|fmode|capabilities|selabel> <value> [<uid|gid|dmode|fmode|capabilities|selabel_2> <value2> ...]
set_metadata_recursive() {
  dir="$1";
  shift;
  until [ ! "$2" ]; do
    case $1 in
      uid) chown -R $2 $dir;;
      gid) chown -R :$2 $dir;;
      dmode) find "$dir" -type d -exec chmod $2 {} +;;
      fmode) find "$dir" -type f -exec chmod $2 {} +;;
      capabilities) ;;
      selabel)
        for i in /system/bin/toybox /system/toolbox /system/bin/toolbox; do
          find "$dir" -exec LD_LIBRARY_PATH=/system/lib $i chcon -h $2 {} +;
          find "$dir" -exec LD_LIBRARY_PATH=/system/lib $i chcon $2 {} +;
        done;
        find "$dir" -exec chcon -h $2 '{}' +;
        find "$dir" -exec chcon $2 '{}' +;
      ;;
      *) ;;
    esac;
    shift 2;
  done;
}

# set_perm <owner> <group> <mode> <file> [<file2> ...]
set_perm() {
  uid=$1; gid=$2; mod=$3;
  shift 3;
  chown $uid.$gid $*; chown $uid:$gid $*;
  chmod $mod $*;
}
# set_perm_recursive <owner> <group> <dir_mode> <file_mode> <dir> [<dir2> ...]
set_perm_recursive() {
  uid=$1; gid=$2; dmod=$3; fmod=$4;
  shift 4;
  until [ ! "$1" ]; do
    chown -R $uid.$gid $1; chown -R $uid:$gid $1;
    find "$1" -type d -exec chmod $dmod {} +;
    find "$1" -type f -exec chmod $fmod {} +;
    shift;
  done;
}

# ch_con <context> <file> [<file2> ...]
ch_con() {
  con=$1;
  shift;
  for i in /system/bin/toybox /system/toolbox /system/bin/toolbox; do
    LD_LIBRARY_PATH=/system/lib $i chcon -h u:object_r:$con:s0 $*;
    LD_LIBRARY_PATH=/system/lib $i chcon u:object_r:$con:s0 $*;
  done;
  chcon -h u:object_r:$con:s0 $*;
  chcon u:object_r:$con:s0 $*;
}
# ch_con_recursive <dir_context> <file_context> <dir> [<dir2> ...]
ch_con_recursive() {
  dcon=$1; fcon=$2;
  shift 2;
  until [ ! "$1" ]; do
    for i in /system/bin/toybox /system/toolbox /system/bin/toolbox; do
      find "$1" -type d -exec LD_LIBRARY_PATH=/system/lib $i chcon -h u:object_r:$dcon:s0 {} +;
      find "$1" -type f -exec LD_LIBRARY_PATH=/system/lib $i chcon -h u:object_r:$fcon:s0 {} +;
      find "$1" -type d -exec LD_LIBRARY_PATH=/system/lib $i chcon u:object_r:$dcon:s0 {} +;
      find "$1" -type f -exec LD_LIBRARY_PATH=/system/lib $i chcon u:object_r:$fcon:s0 {} +;
    done;
    find "$1" -type d -exec chcon -h u:object_r:$dcon:s0 '{}' +;
    find "$1" -type f -exec chcon -h u:object_r:$fcon:s0 '{}' +;
    find "$1" -type d -exec chcon u:object_r:$dcon:s0 '{}' +;
    find "$1" -type f -exec chcon u:object_r:$fcon:s0 '{}' +;
    shift;
  done;
}
# restore_con <file/dir> [<file2/dir2> ...]
restore_con() { 
  for i in /system/bin/toybox /system/toolbox /system/bin/toolbox; do
    LD_LIBRARY_PATH=/system/lib $i restorecon -R $*;
  done;
  restorecon -R $*;
}

# read_file(filename) {} is unneeded since file contents can be read directly with the cat command
# concat(expr[, expr, ...]) {} is unneeded since string operations can be done directly
# stdout(expr[, expr, ...]) {} is unneeded since all output goes to stdout by default

# file_getprop <file> <property>
file_getprop() { grep "^$2" "$1" | cut -d= -f2; }
# getprop <property>
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || grep "^$1" /default.prop; }

# sha1_check <file> [<sha1_hex> [<sha1_hex2> ...]]
sha1_check() {
  sum=$(sha1sum $1 | cut -d  -f1);
  if [ ! "$2" -o $(is_substring $sum "$*") == 1 ]; then
    echo $sum;
  fi;
}

# apply_patch <src_file> <tgt_file> <tgt_sha1> <tgt_size> [<src_sha1_1>:<patch1> [<src_sha1_2>:<patch2> ...]]
apply_patch() {
  LD_LIBRARY_PATH=/system/lib applypatch $*;
}
# apply_patch_check <file> [<sha1_hex> [<sha1_hex2> ...]]
apply_patch_check() {
  LD_LIBRARY_PATH=/system/lib applypatch -c $*;
}
# apply_patch_space <bytes>
apply_patch_space() {
 LIBRARY_PATH=/system/lib applypatch -s $1;
}

# run_program(program) {} is unneeded since programs may be run directly

# abort [<message>]
abort() { ui_print "$*"; exit 1; }
# assert "<command>" ["<command2>"]
assert() {
  until [ ! "$1" ]; do
    $1;
    test $? == 1 && abort "assert failed($1)";
    shift;
  done;
}

# backup_files <file> [<file2> ...]
backup_files() {
  until [ ! "$1" ]; do
    test ! -e "$1.bak" && cp -pf "$1" "$1.bak";
    shift;
  done;
}
# restore_files <file> [<file2> ...]
restore_files() {
  until [ ! "$1" ]; do
    mv -f "${1}.bak" "$1";
    shift;
  done;
}



##########################################################################################
#                                    UPDATE INDEX
#
#  - Define all system related variables
#  - Mount all partions
#  - Make tmp dirs (mkdir)
#  - Detect installation type (update || install)
#  
#  if(action == update){
#  Check for init.d && busybox support else enable it
#  Replace core scripts to (init.d || su.d)[prefs is su.d]
#  mv resources to /data
#  mv scripts to /sdcard
#  set perms (chmod775 && chmod 777)
#  }
#
#
#  if(action == install){
#  init.d or su.d support && if(init.d=0)then enable by patching ramdisk
#  install busybox using $arch (no x86 support)
#  Install core scripts to (init.d || su.d)[prefs is su.d]
#  mv resorces to /data
#  mv scripts to /sdcard
#  set perms (chmod775 && chmod 777)
#  }
#
##########################################################################################

# Detect ARCH
if [ "$$(getprop ro.product.cpu.abi2)" == "armeabi" ]
then
ARCH="arm"
elif [ "$(getprop ro.product.cpu.abi2)" == "armeabi-v6l" ]
then
ARCH="arm"
elif [ "$(getprop ro.product.cpu.abi)" == "arm64-v8a" ]
then
ARCH="arm64"
fi
nowver=1
Batt=$(cat /sys/class/power_supply/battery/capacity);
RAM=$((` $box awk '/MemTotal/{print $2}' /proc/meminfo` / 1024 ));
API=$(cat /system/build.prop 2>/dev/null | sed -n "s/^ro.build.version.sdk=//p" | head -n 1);
sweet=$(getprop ro.build.id /system/build.prop);
codename=$(getprop ro.product.device /system.build.prop);
rom=$(getprop ro.build.display.id /system/build.prop)
romb=$(getprop ro.build.version.release /system/build.prop)

# Preamble
ui_print "###################################################"
ui_print "#                                                 #"
ui_print "# ================ IntelliBoost ================= #"
ui_print "# ----------------- Version: 1 ------------------ #"
ui_print "# ================= By @ala_mo ================== #"
ui_print "#                                                 #"
ui_print "###################################################"
ui_print ""
sleep 1
ui_print "###################################################"
ui_print "#                                                 #"
ui_print "#====== Boosts battery life and smoothness:) =====#"
ui_print "#------ For mid-ranged to flagship devices -------#"
ui_print "#-- Not suitable for old devices with 1-2gb ram --#"
ui_print "#                                                 #"
ui_print "###################################################"
ui_print ""
sleep 2
ui_print "###################################################"
ui_print "#================= System info ===================#"
ui_print "# Android Version: $sweet                         #"
ui_print "# ROM: $rom                                       #"
ui_print "# Device codename: $codename                      #"
ui_print "# Build: $romb                                    #"
ui_print "# Architecture: $ARCH                             #"
ui_print "# API: $API                                       #"
ui_print "# Battery capacity: $Batt                         #"
ui_print "# RAM: $RAM                                       #"
ui_print "# Kernel: `uname -r`                              #"
ui_print "###################################################"

sleep 3



# Modular installation
# ONLY ACCEPTS BOOLEAN TRUE FALSE VALUES

if [ -e "/sdcard/intelliboost.prop" ] #find modular properties
then
wipeinitd=$(getprop wipe.initd /sdcard/intelliboost.prop)
ga=$(getprop enable.google.assistant)


#execute correct actions from here


else
  ui_print "===> No modular prefs file detected"
  ui_print "===> Creating on in internal storage..."
  sleep 1
  touch /sdcard/intelliboost.prop

  echo "                                   " >> /sdcard/intelliboost.prop


  sleep 0.5

  ui_print '===> You can go to "tinyurl.com/intelliboostprop"'
  ui_print " To find out how to do modular installations (video)"
  ui_print " The installation will resume, going with the optimal modules"
fi


# Set progress to 0
set_progress 0.0

ui_print "===> Mounting partitions..."
# find system block and mount
ui_print " ";

ui_print " - Mounting system partition"
mount -o remount, rw /system

ui_print " - Mounting data partition"
sleep 1
mount -o remount, rw /data

ui_print " - Mounting sdcard partitions"
sleep 1
mount -o remount, rw /sdcard
mount -o remount, rw /sdcard1

sleep 1

# Temorary stuff
# Named ibtemp to prevent conflicts with any previous stuff
ui_print "===> Creating installation paths..."
mkdir /data/intelliboost
show_progress 0.1 5

mkdir /ibtemp # Main dir
mkdir /ibtemp/bus #(M) extract to "xbin", "bin", "sbin" or "/data/intelliboost"
mkdir /ibtemp/data #Includes resources, universalversion and logfreescripts
mkdir /ibtemp/common # temp extract to be run for o t ops
mkdir /ibtemp/logs #(M) extract to either /sdcard or /sdcard1
mkdir /ibtemp/kernel #kernel tools for init.d and patching ramdisk
mkdir /ibtemp/scripts #Core
mkdir /ibtemp/system #Snappy assert display and adblock host file

#subdirs
mkdir /data/intelliboost/logs
mkdir /data/intelliboost/logfreescripts

# Temorary stuff
ui_print "===> Moving installation files to /ibtemp..."
show_progress 0.1 5

package_extract_dir "bus"
sleep 1

show_progress 0.2 2

ui_print "====> Detecting installation type"
if [ -e "/system/init.d/42intelliengine" ]
  then
    if [ -e "/data/intelliboost/version" ]
      then
      currver=$(getprop build.version /data/intelliboost/version);
      vpresence=1
    fi
action="update"
if["vpresence" == "1"]; then
ui_print '===> Action is to update from v$currver to v$nowver'
else
  ui_print "Action is to update"
fi
else
action="install"
ui_print "===> No previous installation of intelliboost was detected :p"
ui_print '===> Action is to install v$nowver'
fi

if [ "$currver" == "$nowver"]
  then
  ui_print "===> You seem to be trying to reinstall v$currver"
  ui_print "===> No worries, the dynamic installation will properly handle this"
fi

# Check for init.d or su.d support
if [ -e "/system/su.d" ]
then
  ui_print "===> su.d support detected :)"
  sud=1
 elif [ -e "/system/etc/init.d" ]
  ui_print "===> init.d support found! Skipping enabler..."
initd=1
else
  ui_print "===> init.d && su.d not supported, enabling init.d..."
  #Run init enabler script here

fi

#Run recheck sequence, merge into enabler
if [ "$sud" == "0" && "initd" == "0"]
then
  if [-e "/system/etc/init.d" ]
then
  ui_print "===> init.d support detected :)"
  initd=1
else
  ui_print "===> Failed to enable init.d :("
  initd=0
fi

# Goes 2 directions here using if else statement

if [ "$action" == "update"]
  then
  ui_print "===> Detected IntelliBoost $currver"

  # Call method
if [ "$sud" == "1" ]
then
   kek=$(ls /system/su.d);
   ui_print "$kek"
else
   kek=$(ls /system/etc/init.d);
   ui_print "$kek"
fi
  sleep 1
  ui_print "===> Updating IntelliBoost from $currver to $nowver..."
  sleep 1

#code here














elif [ "$action" == "install"]
 then
 ui_print "===> No traces of IntelliBoost"
 sleep 1
  ui_print "===> Installing from scratch..."
  sleep 1

show_progress 0.9 4
ui_print "====> Installing core scripts"

sleep 1






#code here








# READ MODULAR VALUES FROM HERE


ui_print "===> Moving resources to /data"
sleep 2
mkdir /data/intelliboost/resource && package_extract_dir "/data" "/data/intelliboost/"

ui_print "===> Moving resources to /sdcard"
sleep 1
mkdir /sdcard/intelliboost/logs && package_extract_dir "/logs" "/sdcard/intelliboost/logs"


# Busybox loop here to Detected
# if detected rmb to moce the files in bus to /system/xbin and  set_perm_recursive
#if #ADD CLEANING SCRIPT SPECIFIED DIRS HERE

if [ -e "/system/xbin/busybox" || -e "/system/bin/busybox" ]; then
echo "You have busybox installed :)"
else
	echo "You do not have busybox installed, this mod requires and will help you install it"
cp /tmp/bus/$ARCH/busybox /system/xbin

# x86 loop
fi
fi
sleep 1
echo "Setting busybox perms..."
sleep 2
set_perm_recursive 0 0 0755 0755 /data/intelliboost/busybox

# RUN ONE TIME SCRIPTS HERE
# Located in /common

#backup.sh
#assert.sh (detect snapdragon)

chmod -R 775 /ibtemp/common # Grant the scripts perm



#Set perms for cron, merge their update bin here
# Chmod775 the scripts specifically
chmod -R 775 /system/xbin
chmod 775 /system/hosts
chmod 775 -R /data/intelliboost/resource/*
chown root:shell /system/etc/init.d/
chmod 755 /system/bin/sysinit
chown root:shell /system/bin/sysinit

set_perm_recursive 0 0 0755 0755 /system/etc/init.d/6remount
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/44zipalign
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/32lmk
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/14sqlite
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/92cleaner
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/69renice
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/42intelliengine
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/2setprop
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/11lightseeder
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/91google
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/46zram
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/1loop
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/08sdcard
set_perm_recursive 0 0 0755 0755 /system/etc/init.d/3fstrim

sleep 2

ui_print "====> Cleaning up temp dirs"
rm -rf /ibtemp
sleep 1

ui_print "###################################################"
ui_print "#                                                 #"
ui_print "#============ Installation Complete! =============#"
ui_print "#-- ---- By alamo, sonickles9 and veez21 ---------#"
ui_print "#----------- Have a good day ahead :p ------------#"
ui_print "#                                                 #"
ui_print "###################################################"

sleep 1

show_progress 1.0 2


